image: $CI_IMAGE

.ace: &ace
    tags: ['ace-x86_64']

.common_only: &common_only
    only:
        - main
        - stable
        - dev
        - merge_requests

.build:
    <<: *ace
    <<: *common_only
    stage: build
    variables:
        APP: app
        ELF_PREFIX: kenning-zephyr-runtime
        BOARDS: >
            b_u585i_iot02a
            stm32f746g_disco
            hifive_unleashed/fu540/e51
    before_script:
        - mkdir -p $HOME/.local/opt
        - tar xzf env.tar.gz
        - cp -r env/.venv .
        - cp -r env/zephyr-sdk $HOME/.local/opt/
        - cp -r env/zephyr-workspace/* ..
        - cp -r env/zephyr-workspace/.west ..
        - mkdir -p artifacts
    script:
        - |
          source .venv/bin/activate
          if [ "$RUNTIME" != "stub" ]
          then
              if [ "$LLEXT" = "y" ]
              then
                RUNTIME_CONF="llext_${RUNTIME}.conf;llext.conf"
                RUNTIME="llext_${RUNTIME}"
              else
                RUNTIME_CONF="${RUNTIME}.conf"
              fi
          fi
          for BOARD in ${BOARDS}
          do
              BOARD_NAME="${BOARD//\//_}"
              python -m west build -p always -b ${BOARD} ${APP} -- -DEXTRA_CONF_FILE=${RUNTIME_CONF} ${EXTRA_ARGS}
              cp build/zephyr/zephyr.elf artifacts/${ELF_PREFIX}-${RUNTIME}-${BOARD_NAME}.elf
          done
    dependencies:
        - prepare-env
    artifacts:
        paths:
            - artifacts/*.elf
        when: always

.build-demo:
    extends: .build
    variables:
        APP: demo_app
        ELF_PREFIX: kenning-zephyr-runtime-demo

.build-llext:
    extends: .build
    variables:
        LLEXT: y
        BOARDS: >
            b_u585i_iot02a
            stm32f746g_disco

variables:
    GIT_STRATEGY: clone

stages:
    - lint
    - prepare-env
    - build
    - tests

pre-commit:
    <<: *ace
    <<: *common_only
    stage: lint
    script:
        - pre-commit run --all-files

prepare-env:
    <<: *ace
    <<: *common_only
    stage: prepare-env
    script:
        - scripts/prepare_zephyr_env.sh
        - scripts/prepare_modules.sh
        - mkdir env
        - mkdir env/zephyr-workspace
        - cp -r .venv env
        - cp -r $HOME/.local/opt/zephyr-sdk env
        - cp -r ../.west env/zephyr-workspace
        - cp -r ../dlpack env/zephyr-workspace
        - cp -r ../iree env/zephyr-workspace
        - cp -r ../modules env/zephyr-workspace
        - cp -r ../tflite-micro env/zephyr-workspace
        - cp -r ../tvm env/zephyr-workspace
        - cp -r ../zephyr env/zephyr-workspace
        - tar czf env.tar.gz env
    artifacts:
        paths:
            - env.tar.gz
        expire_in: 1 day

build-stub:
    extends: .build
    variables:
        RUNTIME: stub

build-tvm:
    extends: .build
    variables:
        RUNTIME: tvm

build-tflite:
    extends: .build
    variables:
        RUNTIME: tflite

build-iree-vmvx:
    extends: .build
    variables:
        RUNTIME: iree_vmvx

build-iree-embedded-elf:
    extends: .build
    variables:
        RUNTIME: iree_embedded_elf

build-demo-tvm:
    extends: .build-demo
    variables:
        RUNTIME: tvm

build-demo-tvm-int8:
    extends: .build-demo
    variables:
        RUNTIME: tvm_int8

build-demo-tflite:
    extends: .build-demo
    variables:
        RUNTIME: tflite

build-demo-tflite-int8:
    extends: .build-demo
    variables:
        RUNTIME: tflite_int8

build-demo-iree-vmvx:
    extends: .build-demo
    variables:
        RUNTIME: iree_vmvx
        BOARDS: >
            b_u585i_iot02a
            hifive_unleashed/fu540/e51

build-demo-iree-embedded-elf:
    extends: .build-demo
    variables:
        RUNTIME: iree_embedded_elf
        BOARDS: >
            b_u585i_iot02a

build-demo-tvm-gen-model:
    extends: .build-demo
    variables:
        RUNTIME: tvm_gen
        ELF_PREFIX: kenning-zephyr-runtime-demo-gen-model
        EXTRA_ARGS: -DCONFIG_KENNING_MODEL_PATH="https://dl.antmicro.com/kenning/models/classification/magic_wand.h5"
        BOARDS: >
            stm32f746g_disco

build-repl:
    extends: .build
    script:
        - |
          source .venv/bin/activate
          for BOARD in ${BOARDS}
          do
              BOARD_NAME="${BOARD//\//_}"
              python -m west build -p always -b ${BOARD} demo_app || true
              python -m west build -t board-repl
              cp build/*.repl artifacts/${BOARD_NAME}.repl
          done
    artifacts:
        paths:
            - artifacts/*.repl
        when: always

build-llext-tvm:
    extends: .build-llext
    variables:
        RUNTIME: tvm

test-demo:
    <<: *ace
    <<: *common_only
    stage: tests
    script:
        - python -m pytest -ra -vvv --color=yes --report-log=log.json ./tests/demo/test_demo.py
    dependencies:
        - build-demo-tvm
        - build-demo-tvm-int8
        - build-demo-tflite
        - build-demo-tflite-int8
        - build-demo-iree-vmvx
        - build-demo-iree-embedded-elf
        - build-demo-tvm-gen-model
        - build-repl
    artifacts:
        paths:
            - log.json
        when: always

test-tflite-reset:
    <<: *ace
    <<: *common_only
    stage: tests
    before_script:
        - mkdir -p $HOME/.local/opt
        - tar xzf env.tar.gz
        - cp -r env/.venv .
        - cp -r env/zephyr-sdk $HOME/.local/opt/
        - cp -r env/zephyr-workspace/* ..
        - cp -r env/zephyr-workspace/.west ..
    script:
        - source .venv/bin/activate
        - ./scripts/test_tflite_reset.sh
    dependencies:
        - prepare-env
    artifacts:
        paths:
            - measurements
            - build
        when: always

unit-tests:
    <<: *ace
    <<: *common_only
    stage: tests
    before_script:
        - mkdir -p $HOME/.local/opt
        - tar xzf env.tar.gz
        - cp -r env/.venv .
        - cp -r env/zephyr-sdk $HOME/.local/opt/
        - cp -r env/zephyr-workspace/* ..
        - cp -r env/zephyr-workspace/.west ..
    script:
        - source .venv/bin/activate
        - python -m west twister -T tests -p unit_testing
    dependencies:
        - prepare-env
    artifacts:
        paths:
            - twister-out
        when: always

tuttest:
    <<: *ace
    <<: *common_only
    image: debian:bookworm
    stage: tests
    script:
        - DEBIAN_FRONTEND=noninteractive apt update -qqy && apt-get install -y sudo python3 python3-pip git colorized-logs fonts-lato
        - rm /usr/lib/python3.11/EXTERNALLY-MANAGED
        - python3 -m pip install setuptools pip
        - python3 -m pip install git+https://github.com/antmicro/tuttest.git
        - ./scripts/test_readme.sh
